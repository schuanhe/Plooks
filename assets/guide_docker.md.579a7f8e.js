import{_ as e,o as a,c as s,a as o}from"./app.c0262cae.js";const C=JSON.parse('{"title":"Docker 部署模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"后端部署","slug":"后端部署","link":"#后端部署","children":[]},{"level":2,"title":"前端部署","slug":"前端部署","link":"#前端部署","children":[]}],"relativePath":"guide/docker.md"}'),n={name:"guide/docker.md"},l=o(`<h1 id="docker-部署模式" tabindex="-1">Docker 部署模式 <a class="header-anchor" href="#docker-部署模式" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在使用docker安装之前，需要安装好docker,docker-compose</p></div><h2 id="后端部署" tabindex="-1">后端部署 <a class="header-anchor" href="#后端部署" aria-hidden="true">#</a></h2><h4 id="_1-配置后端文件" tabindex="-1">1.配置后端文件 <a class="header-anchor" href="#_1-配置后端文件" aria-hidden="true">#</a></h4><blockquote><p>打开<strong>sercver/src/main/resources/application.yml</strong>文件，根据注释将变量填写</p></blockquote><h4 id="_2-构建" tabindex="-1">2.构建 <a class="header-anchor" href="#_2-构建" aria-hidden="true">#</a></h4><p>执行下面命令</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker-compose build</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注:如果你在本地可以打包jar则可以将<strong>docker-composr.yml</strong>文件中的33行替换&quot;Dockerfile&quot;</p><p>只需要确定有<strong>server/target/plooks-api-1.0-SNAPSHOT.jar</strong>文件即可</p></div><h4 id="_3-启动后端" tabindex="-1">3.启动后端 <a class="header-anchor" href="#_3-启动后端" aria-hidden="true">#</a></h4><p>执行下面命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker-compose up -d</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如需要停止项目</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker-compose stop</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="前端部署" tabindex="-1">前端部署 <a class="header-anchor" href="#前端部署" aria-hidden="true">#</a></h2><h4 id="_1-构建" tabindex="-1">1.构建 <a class="header-anchor" href="#_1-构建" aria-hidden="true">#</a></h4><p>docker构建提供了两种构建方式，docker打包+部署内包含了前端项目的构建，但是对服务器性能要求较高， docker仅部署对服务器要求相对低，但需要手动打包前端</p><h5 id="_1-1-使用docker打包-部署" tabindex="-1">1.1 使用docker打包+部署 <a class="header-anchor" href="#_1-1-使用docker打包-部署" aria-hidden="true">#</a></h5><p>进入client目录执行以下命令</p><div class="language-dockerfile"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker build -f Dockerfile-build -t &quot;plooks-web&quot; .</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="_1-2-使用docker仅部署" tabindex="-1">1.2 使用docker仅部署 <a class="header-anchor" href="#_1-2-使用docker仅部署" aria-hidden="true">#</a></h5><ol><li>在构建之前需要先对前端项目进行打包，首先要先安装nodejs和pnpm，然后进入<code>client</code>目录，执行</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm i</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol><li>在<code>client</code>目录中创建<code>dist</code>文件夹</li><li>进入<code>client\\packages\\web-client</code>执行命令<code>pnpm run build</code> 将产生的<code>web</code>文件夹复制到<code>dist</code></li><li>进入<code>client\\packages\\manage-client</code>执行命令<code>pnpm run build</code> 将产生的<code>manage</code>文件夹复制到<code>dist</code></li><li>在<code>client</code>目录下执行以下命令</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker build -t &quot;plooks-web&quot; .</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="_2-启动前端" tabindex="-1">2.启动前端 <a class="header-anchor" href="#_2-启动前端" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker run -itd --name plooks_web -p 2024:2024 &quot;plooks-web&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如需停止项目执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker stop plooks_web</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,29),c=[l];function p(t,i,d,r,h,u){return a(),s("div",null,c)}const g=e(n,[["render",p]]);export{C as __pageData,g as default};
